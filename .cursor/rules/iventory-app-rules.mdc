---
description: 
globs: 
alwaysApply: false
---
You are an expert developer in TypeScript, Node.js, Next.js 14 App Router, React, Supabase, GraphQL, Genql, Tailwind CSS, Radix UI, and Shadcn UI.

   ⚠️ MIGRATION FILES: NEVER add timestamps to migration filenames. ALWAYS use:
   supabase migration new <name_of_migration>
   Let Supabase CLI handle timestamps automatically.


   ⚠️ ALWAYS: We're using Next.js 15, all files are by default server but its very IMPORTANT: Every time you create a new file if they're using any hook or they're custom hook itself put at the top of the file "use client".

Let me help you improve the documentation to align with the features-pattern approach. First, I'll analyze the current structure and then propose improvements.

I'll search for relevant files to understand the current documentation.

Search files...
Let me analyze the current repository pattern and the features-pattern.md to propose an improved documentation that aligns with the feature-first approach.

Here's the improved documentation:

# Feature Organization Guidelines

## Overview

This document outlines our guidelines for organizing features in the application. We follow a feature-first approach where each feature is self-contained and follows a consistent structure.

## Directory Structure

```
src/features/
└── feature-name/
    ├── api/
    │   ├── create-entity.ts
    │   ├── delete-entity.ts
    │   ├── get-entity.ts
    │   ├── get-entities.ts
    │   └── update-entity.ts
    ├── components/
    │   ├── entity-list.tsx
    │   ├── entity-view.tsx
    │   ├── create-entity.tsx
    │   ├── update-entity.tsx
    │   └── delete-entity.tsx
    └── types/
        └── index.ts
```

## Database Operations Guidelines

### 1. Migration Files

- NEVER add timestamps to migration filenames
- Use `supabase migration new <name_of_migration>`
- Let Supabase CLI handle timestamps automatically

### 2. Feature Module Structure

Each feature should:
- Be in its own directory under `src/features/`
- Use kebab-case naming (e.g., `user-settings`, `team-management`)
- Be self-contained with its own components and API logic
- Include its own types in a `types` subdirectory

### 3. API Organization

API files should be organized in the `api/` subdirectory following these conventions:

```typescript
// api/create-entity.ts
import { z } from 'zod'
import { useMutation, useQueryClient } from '@tanstack/react-query'

// Input validation schema
export const createEntitySchema = z.object({...})
export type CreateEntityInput = z.infer<typeof createEntitySchema>

// Server action
export const createEntity = async (data: CreateEntityInput) => {...}

// React Query hook
export const useCreateEntity = (config) => {
  const queryClient = useQueryClient()
  return useMutation({
    mutationFn: createEntity,
    onSuccess: () => {
      queryClient.invalidateQueries([...])
    },
    ...config
  })
}
```

Common operations should follow consistent naming:
- `create-*.ts` - Creation operations
- `delete-*.ts` - Deletion operations
- `get-*.ts` - Single entity fetch
- `get-*s.ts` - List fetch operations
- `update-*.ts` - Update operations

### 4. Component Organization

Components should be organized in the `components/` subdirectory:
- Keep components focused and single-responsibility
- Follow consistent naming patterns:
  - `*-list.tsx` - List views
  - `*-view.tsx` - Detail views
  - `create-*.tsx` - Creation forms
  - `update-*.tsx` - Update forms
  - `delete-*.tsx` - Delete confirmations

### 5. State Management

- Use React Query for server state
- Keep local state minimal and close to where it's used
- Use proper caching and invalidation strategies
- Implement optimistic updates when appropriate

### 6. Form Handling

- Use Zod for schema validation
- Implement proper error handling
- Show clear error messages
- Handle loading and success states

### 7. Database Operations

When adding a new database table:
1. Create a migration file using `supabase migration new <name_of_migration>`
2. Define the table schema in the migration file
3. Create corresponding API files in the feature's `api` directory
4. Create necessary components in the feature's `components` directory
5. Define types in the feature's `types` directory

When modifying existing tables:
1. Create a new migration file
2. Update the corresponding API files
3. Update affected components
4. Update types as needed

### 8. Best Practices

- Always verify database schemas using MCP before implementation
- Use TypeScript for type safety throughout the feature
- Keep files small and focused (<200 lines)
- Write clear comments and documentation
- Implement proper error handling
- Follow consistent code formatting
- Use React Query for data fetching
- Implement proper loading states

## Example Feature Implementation

See the following features in our codebase for reference implementations:
- `src/features/clients/` - Complete CRUD operations with document management
- `src/features/electronic-signature/` - Document signing workflow

These examples demonstrate:
- Proper feature organization
- API implementation
- Component structure
- State management
- Error handling
- TypeScript usage
- Form handling
- Loading states

This documentation now aligns with the feature-first approach while maintaining the key principles of clean code, type safety, and proper organization. The main differences from the repository pattern are:

1. Feature-centric organization instead of layer-centric
2. Co-location of related code (API, components, types)
3. Simplified directory structure
4. Direct integration with React Query
5. Clearer separation of concerns within features
