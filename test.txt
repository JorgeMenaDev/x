"use client"

import { useState, useEffect } from "react"
import { ChevronRight, ChevronDown, Copy, Check } from "lucide-react"
import { cn } from "@/lib/utils"

interface JsonViewerProps {
  data: any
  initialExpanded?: boolean
  className?: string
}

export default function JsonViewer({ data, initialExpanded = true, className }: JsonViewerProps) {
  const [jsonData, setJsonData] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)
  const [copied, setCopied] = useState(false)

  useEffect(() => {
    try {
      // Handle string input (parse it) or object input (use directly)
      if (typeof data === "string") {
        setJsonData(JSON.parse(data))
      } else {
        setJsonData(data)
      }
      setError(null)
    } catch (err) {
      setError("Invalid JSON data")
      console.error(err)
    }
  }, [data])

  const handleCopy = () => {
    const jsonString = typeof data === "string" ? data : JSON.stringify(data, null, 2)
    navigator.clipboard.writeText(jsonString)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  if (error) {
    return <div className="p-4 bg-red-50 text-red-500 rounded-md border border-red-200">{error}</div>
  }

  return (
    <div className={cn("relative font-mono text-sm rounded-md border bg-muted/50", className)}>
      <div className="absolute right-2 top-2 z-10">
        <button
          onClick={handleCopy}
          className="p-1.5 rounded-md hover:bg-muted transition-colors"
          aria-label="Copy JSON"
        >
          {copied ? <Check size={16} /> : <Copy size={16} />}
        </button>
      </div>
      <div className="p-4 overflow-auto max-h-[80vh]">
        {jsonData && <JsonNode data={jsonData} name="root" isRoot={true} initialExpanded={initialExpanded} />}
      </div>
    </div>
  )
}

interface JsonNodeProps {
  data: any
  name: string
  isRoot?: boolean
  initialExpanded?: boolean
}

function JsonNode({ data, name, isRoot = false, initialExpanded = true }: JsonNodeProps) {
  const [isExpanded, setIsExpanded] = useState(initialExpanded)
  const dataType = Array.isArray(data) ? "array" : typeof data
  const isExpandable = dataType === "object" || dataType === "array"

  const toggleExpand = () => {
    if (isExpandable) {
      setIsExpanded(!isExpanded)
    }
  }

  const renderValue = () => {
    if (data === null) return <span className="text-purple-500">null</span>

    switch (dataType) {
      case "boolean":
        return <span className="text-orange-500">{data.toString()}</span>
      case "number":
        return <span className="text-blue-500">{data}</span>
      case "string":
        return <span className="text-green-500">"{data}"</span>
      case "object":
      case "array":
        if (Object.keys(data).length === 0) {
          return <span className="text-gray-500">{dataType === "object" ? "{}" : "[]"}</span>
        }
        return renderExpandableValue()
      default:
        return <span>{String(data)}</span>
    }
  }

  const renderExpandableValue = () => {
    const isArray = Array.isArray(data)
    const items = isArray ? data : Object.entries(data)
    const brackets = isArray ? ["[", "]"] : ["{", "}"]

    return (
      <div>
        <div className="inline-flex items-center">
          <button
            onClick={toggleExpand}
            className="mr-1 focus:outline-none"
            aria-label={isExpanded ? "Collapse" : "Expand"}
          >
            {isExpanded ? <ChevronDown size={14} /> : <ChevronRight size={14} />}
          </button>
          {!isRoot && (
            <>
              <span className="text-gray-500">{brackets[0]}</span>
              {!isExpanded && (
                <span className="text-gray-400 ml-1">
                  {isArray ? `${items.length} items` : `${Object.keys(data).length} keys`}
                </span>
              )}
              {!isExpanded && <span className="text-gray-500 ml-1">{brackets[1]}</span>}
            </>
          )}
        </div>

        {isExpanded && (
          <div className="ml-4 border-l border-gray-300 pl-2 mt-1">
            {isArray
              ? // Render array items
                items.map((item, index) => (
                  <div key={index} className="my-1">
                    <JsonNode data={item} name={index.toString()} initialExpanded={initialExpanded} />
                  </div>
                ))
              : // Render object properties
                Object.entries(data).map(([key, value], index) => (
                  <div key={key} className="my-1">
                    <span className="text-red-500 mr-1">"{key}"</span>
                    <span className="mr-1">:</span>
                    <JsonNode data={value} name={key} initialExpanded={initialExpanded} />
                  </div>
                ))}
          </div>
        )}

        {isExpanded && !isRoot && <span className="text-gray-500">{brackets[1]}</span>}
      </div>
    )
  }

  if (isRoot) {
    return renderValue()
  }

  return (
    <div className="inline">
      {!isExpandable ? (
        <>
          {!isRoot && Array.isArray(data) && <span className="mr-1">{name}:</span>}
          {renderValue()}
        </>
      ) : (
        renderValue()
      )}
    </div>
  )
}
